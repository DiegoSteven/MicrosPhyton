version: '3.8'

services:
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: microsphyton_rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microsphyton_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de datos para los servicios
  db:
    image: postgres:15
    container_name: microsphyton_db
    environment:
      POSTGRES_DB: microsphyton
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microsphyton_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d microsphyton"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cliente Service
  cliente_service:
    build:
      context: ./Backend
      dockerfile: Dockerfile.cliente
    container_name: microsphyton_cliente_service
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=cliente_service/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://admin:admin123@db:5432/microsphyton
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microsphyton_network
    restart: unless-stopped

  # Orden Service
  orden_service:
    build:
      context: ./Backend
      dockerfile: Dockerfile.orden
    container_name: microsphyton_orden_service
    ports:
      - "5002:5002"
    environment:
      - FLASK_APP=orden_service/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://admin:admin123@db:5432/microsphyton
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microsphyton_network
    restart: unless-stopped

  # Inventario Service
  inventario_service:
    build:
      context: ./Backend
      dockerfile: Dockerfile.inventario
    container_name: microsphyton_inventario_service
    ports:
      - "5003:5003"
    environment:
      - FLASK_APP=inventario_service/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://admin:admin123@db:5432/microsphyton
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microsphyton_network
    restart: unless-stopped

  # Despacho Service
  despacho_service:
    build:
      context: ./Backend
      dockerfile: Dockerfile.despacho
    container_name: microsphyton_despacho_service
    ports:
      - "5004:5004"
    environment:
      - FLASK_APP=despacho_service/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://admin:admin123@db:5432/microsphyton
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microsphyton_network
    restart: unless-stopped

  # Env√≠os Service
  envios_service:
    build:
      context: ./Backend
      dockerfile: Dockerfile.envios
    container_name: microsphyton_envios_service
    ports:
      - "5008:5008"
    environment:
      - FLASK_APP=envios_service/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://admin:admin123@db:5432/microsphyton
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microsphyton_network
    restart: unless-stopped

  # Cobros Service
  cobros_service:
    build:
      context: ./Backend
      dockerfile: Dockerfile.cobros
    container_name: microsphyton_cobros_service
    ports:
      - "5005:5005"
    environment:
      - FLASK_APP=cobros_service/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://admin:admin123@db:5432/microsphyton
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microsphyton_network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: microsphyton_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - cliente_service
      - orden_service
      - inventario_service
      - despacho_service
      - envios_service
      - cobros_service
    networks:
      - microsphyton_network
    restart: unless-stopped

volumes:
  rabbitmq_data:
  postgres_data:

networks:
  microsphyton_network:
    driver: bridge 